import map;
import rayui;
import raylib;
import json::*;
import fs;

/*
  If you add to 'Data' you must update TypeConstraint's variants
  and update the impl for get_type_constraint() for Data.
  so that nodes can accurately represent your type,
*/
choice Data {
  None,
  Int(s64),
  Float(f64),
  Bool(bool),
  String(String),
  Vector2(raylib::Vector2),
}

#flags enum TypeConstraint {
  None,
  Int,
  Float,
  Bool,
  String,
  Vector2,

  Any = Int     |
        Float   |
        Bool    |
        String  |
        Vector2,
}

impl Data {
  fn get_type_constraint(self) -> TypeConstraint {
    switch is self {
      Data::Int => TypeConstraint::Int,
      Data::Float => TypeConstraint::Float,
      Data::Bool => TypeConstraint::Bool,
      Data::String => TypeConstraint::String,
      Data::Vector2 => TypeConstraint::Vector2,
    }
    return TypeConstraint::None;
  }
}

struct Port {
  id: u32,
  name: str,
  value: Data,
  constraints: TypeConstraint,
}

struct Node {
  id: u32,
  inputs: map::Map!<u32, Port>,
  outputs: map::Map!<u32, Port>,
}

impl Node {
  fn add_input(*mut self, name: str, constraints: TypeConstraint)  -> u32 {
    id := self.inputs.length() as u32;

    self.inputs.insert(id, Port.{
      id: id,
      name: name,
      constraints: constraints,
      value: Data::None,
    });

    return id;
  }

  fn add_output(*mut self, name: str, constraints: TypeConstraint) -> u32 {
    id := (self.inputs.length() + self.outputs.length()) as u32;

    self.outputs.insert(id, Port.{
      id: id,
      name: name,
      constraints: constraints,
      value: Data::None,
    });

    return id;
  }
}

struct Edge {
  source_node: u32,
  source_port: u32,
  target_node: u32,
  target_port: u32,
}

impl Edge {
  fn new(source: *Node, source_port: u32, target: *Node, target_port: u32) -> Edge {
    return .{
      source_node: source.id,
      source_port: source_port,
      target_node: target.id,
      target_port: target_port,
    };
  }
}

struct Graph {
  nodes: map::Map!<u32, Node>,
  edges: List!<Edge>,
}

impl Graph {
  fn add_edge(*mut self, edge: Edge) {
    self.edges.push(edge);
  }
  fn add_node(*mut self, node: Node) {
    self.nodes.insert(self.nodes.length() as u32, node);
  }
}