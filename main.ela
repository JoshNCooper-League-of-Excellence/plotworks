import rayui::*;
import fmt::*;

fn screen_to_nodespace(screen_pos: Vector2) -> Vector2;
fn nodespace_to_screen(node_value: Vector2) -> Vector2;

enum PlacementMode {
  None,
  Node,
  Operation,
  MAX,
}

enum Operator {
  Distance,
  Dot,
  Normalize,
  MAX,
}

impl Operator {
  fn required_operands_count(self) -> u8 {
    switch self {
      Operator::Distance => 2,
      Operator::Dot => 2,
      Operator::Normalize => 1,
    }
    return 0;
  }
}

struct Node;
struct Operation;
struct FreeformArea {
  base: WidgetBase,
  placement_mode: PlacementMode,
  selected_operands: List!<*mut Node>,
  selected_operator: Operator,
}

struct Context {
  nodes: List!<Node>,
  operations: List!<Operation>,

  node_list_ui: *mut ListBox,
  toolbar: *mut ListBox,
  freeform_area: *mut FreeformArea,
  node_list_button_style: Style,
  font: Font,
}

mut gContext: Context;

fn nodespace_to_screen(node_value: Vector2) -> Vector2 {
  rect := gContext.freeform_area.base.rectangle;
  return Vector2.{
    x: rect.x + node_value.x * rect.width,
    y: rect.y + node_value.y * rect.height,
  };
}

fn screen_to_nodespace(screen_pos: Vector2) -> Vector2 {
  rect := gContext.freeform_area.base.rectangle;
  return Vector2.{
    x: (screen_pos.x - rect.x) / rect.width,
    y: (screen_pos.y - rect.y) / rect.height,
  };
}

struct Operation {
  operator: Operator,
  operands: List!<*mut Node>,
}

struct Node {
  name: *mut String,
  shape: SolidShape,
  color: Color,
  value: Vector2,
  dragging: bool,
}

impl Deinit for Node {
  fn deinit(*mut self) {
    get_global_allocator().free(self.name);
  }
}

// Formatter for drawing argument lists neater.
impl Format for List!<*mut Node> {
  fn format(*const self, formatter: *mut Formatter) {
    element_type := typeof(Node);
    for i, val in self.enumerate() {
      formatter.writer.append(*val.name);
      if formatter.options.indented && i != self.length - 1 {
        formatter.writer.append(",\n  ");
      } else if i != self.length - 1 {
        formatter.writer.append(",");
      }
    }
  }
}

impl FreeformArea {
  fn draw_node_mode(*mut self) {
    right := IsMouseButtonDown(MouseButton::MOUSE_BUTTON_RIGHT);
    left := IsMouseButtonDown(MouseButton::MOUSE_BUTTON_LEFT);
    left_shift := IsKeyDown(KeyboardKey::KEY_LEFT_SHIFT);
    mouse := GetMousePosition();

    // Dragging
    for node in gContext.nodes.iter_mut() {
      if node.dragging {
        if !IsMouseButtonDown(MouseButton::MOUSE_BUTTON_RIGHT) {
          node.dragging = false; 
          return;
        }
        node.value = screen_to_nodespace(GetMousePosition());
      }
    }

    // Draw preview node.
    if !right {
      mouse := GetMousePosition();
      mut shape := SolidShape::Circle.{ radius: 5.0 };
      shape.draw(mouse, WHITE.with_alpha(90));
      nodespace_pos := screen_to_nodespace(mouse);
      draw_textf("x=%, y=%", 
        (nodespace_pos.x, nodespace_pos.y), 
        mouse + Vector2::scalar(15), 
        Style.{ 
          font_size: 15, 
          font: self.base.style.font, 
          font_color_override: Some(WHITE.with_alpha(200))
        },
        *FormatOptions::current(),
      );
    }

    // Start dragging.
    if self.base.input_state & InputState::Pressed {
      if right {
        for node in gContext.nodes.iter_mut() {
          if CheckCollisionPointCircle(nodespace_to_screen(node.value), mouse, 10.0) {
            node.dragging = true;
            break;
          }
        }
      } else if left { // Placing new nodes
        nodespace_pos := screen_to_nodespace(mouse);
        for node in gContext.nodes {
          if node.value == nodespace_pos {
            return;
          }
        }
        #static mut name_idx := 65;
        node := Node.{
          shape: SolidShape::Circle.{ radius: 5.0 }
          value: nodespace_pos,
          color: WHITE,
          name: new(std::asprintf("%c", get_global_allocator(), name_idx++)),
        };

        gContext.nodes.push(node);
        gContext.node_list_ui.add_child(new(TextField.{
          base: .{
            style: gContext.node_list_button_style,
          }
          text: node.name,
        }));
      }
    }
  }
  fn draw_operation_mode(*mut self) {
    right := IsMouseButtonDown(MouseButton::MOUSE_BUTTON_RIGHT);
    left := IsMouseButtonDown(MouseButton::MOUSE_BUTTON_LEFT);
    left_shift := IsKeyDown(KeyboardKey::KEY_LEFT_SHIFT);
    mouse := GetMousePosition();
    
    { // Draw current in-progress build of operation

      mut options := *FormatOptions::current();
      options.enum_parent_name = false;
      options.quote_strings = false;
      draw_textf("%(%)",
        (self.selected_operator, self.selected_operands),
        mouse + Vector2::scalar(15), 
        Style.{ 
          font_size: 15, 
          font: self.base.style.font, 
          font_color_override: Some(WHITE.with_alpha(200))
        },
        options,
      );
    }

    if self.base.input_state & InputState::Pressed == 0 {
      return;
    }

    if right && left_shift { // Swap selected operator
      self.selected_operator = (self.selected_operator + 1) % Operator::MAX;
    } else if right { // push new operation
      if self.selected_operands.length == self.selected_operator.required_operands_count() {
        gContext.operations.push(.{
          operator: self.selected_operator,
          operands: self.selected_operands,
        });
        self.selected_operands = .{};
        self.selected_operator = 0;
      }
    } else if left && left_shift {
      mut found_node: *mut Node;
      mouse_pos := GetMousePosition();
      for node in gContext.nodes.iter_mut() {
        if CheckCollisionPointCircle(nodespace_to_screen(node.value), mouse_pos, 10.0) {
          found_node = node;
          break;
        }
      }

      if !found_node {
        return;
      }

      if self.selected_operands.length < self.selected_operator.required_operands_count() {
        self.selected_operands.push(found_node);
      }
    }
  }
}

impl Widget for FreeformArea {
  fn get_children(*const self) -> *mut List!<dyn Widget> {
    return null;
  }

  fn draw(*mut self) {
    DrawRectangleLinesEx(
      self.base.rectangle, 
      self.base.style.line_thickness, 
      self.base.style.background
    );

    if self.base.input_state & InputState::Hovered == 0 
      then return;

    mut mouse_wheel := GetMouseWheelMove();

    // Switch placement mode. To be replaced.
    if mouse_wheel != 0 {
      if mouse_wheel > 0 {
        mouse_wheel = 1.1;
      } else {
        mouse_wheel = -1.1;
      }
      self.placement_mode = clamp((self.placement_mode + mouse_wheel as s32) % PlacementMode::MAX, 0, PlacementMode::MAX);
    }

    if self.placement_mode == PlacementMode::Node {
      self.draw_node_mode();
    } else if self.placement_mode == PlacementMode::Operation {
      self.draw_operation_mode();
    }
  }
}

impl Deinit for Operation {
  fn deinit(*mut self) {
    self.operands.deinit();
  }
}

impl Operation {
  fn draw(*mut self) {
    switch self.operator {
      Operator::Distance: {
        left := self.operands[0];
        right := self.operands[1];

        left_ss := nodespace_to_screen(left.value);
        right_ss := nodespace_to_screen(right.value);

        result := left.value.distance(right.value);
        halfway := (left_ss + right_ss) / 2.0;

        DrawLineV(left_ss, right_ss, WHITE.with_alpha(60));

        buffer := std::asprintf("Distance(%s,%s)=%.4f", get_global_allocator(), left.name.data, right.name.data, result);
        defer buffer.deinit();

        delta := right_ss - left_ss;
        angle := atan2(delta.y, delta.x) * (180.0 / PI);
        normal := (Vector2.{ x: -delta.y, y: delta.x }).normalize();
        text_offset := normal * 12.0;
        text_pos := halfway + text_offset;
        text_size := MeasureTextEx(gContext.font, buffer.data, 16, 1);

        DrawTextPro(
          gContext.font,
          buffer.data,
          text_pos,
          Vector2.{ x: text_size.x / 2, y: text_size.y / 2 },
          angle as f32,
          12,
          1,
          ColorLerp(GREEN, WHITE, 0.8)
        );
      }

      Operator::Dot: {
        a, b := (self.operands[0], self.operands[1]);

        result := a.value.dot(b.value);

        a_ss := nodespace_to_screen(a.value);
        b_ss := nodespace_to_screen(b.value);
  
        // Draw both vectors from the same origin (for visualization)
        DrawLineV(a_ss, b_ss, WHITE.with_alpha(40));

        // Draw projection of a onto b
        ab := b_ss - a_ss;
        a_vec := a.value;
        b_vec := b.value;
        b_dir := b_vec.normalize();
        proj_length := a_vec.dot(b_dir);
        proj_vec := b_dir * proj_length;

        // Projected point in world space
        proj_point := a_ss + proj_vec;

        DrawLineV(a_ss, proj_point, BLUE.with_alpha(120));
        DrawCircleV(proj_point, 5, BLUE);

        // Draw annotation
        halfway := (a_ss + proj_point) / 2.0;
        buffer := std::asprintf("Dot(%s,%s)=%.4f", get_global_allocator(), a.name.data, b.name.data, result);
        defer buffer.deinit();

        delta := proj_point - a_ss;
        normal := (Vector2.{ x: -delta.y, y: delta.x }).normalize();
        text_offset := normal * 14.0;
        text_pos := halfway + text_offset;
        text_size := MeasureTextEx(gContext.font, buffer.data, 16, 1);

        DrawTextPro(
          gContext.font,
          buffer.data,
          text_pos,
          Vector2.{ x: text_size.x / 2, y: text_size.y / 2 },
          0.0,
          12,
          1,
          ColorLerp(BLUE, WHITE, 0.8)
        );
      }

      Operator::Normalize: {
        
      }
    }
  }
}

impl Node {
  fn draw(*mut self) {
    position := nodespace_to_screen(self.value);
    self.shape.draw(position, self.color);

    draw_textf("% (%, %)", 
      (*self.name, self.value.x, self.value.y), 
      position + Vector2::scalar(12),
      Style.{ 
        font_size: 12, 
        font: gContext.font, 
      },
      FormatOptions::current().with_digits_after_decimal(4),
    );
  }
}

fn main() {
  mut allocator: Tracking_Allocator;
  set_global_allocator(dynof(&mut allocator, Allocator));

  mut window := Window!<()>::new("plotworks", ConfigFlags::FLAG_WINDOW_RESIZABLE);
  gContext.font =  LoadFont("assets/FiraCode-Bold.ttf"c);

  gContext.node_list_button_style = .{
    foreground: WHITE,
    background: BLACK.with_alpha(25),
    highlighted: ORANGE,
    line_thickness: 2,
    font_size: 16,
    font_spacing: 1,
    font_color_override: Some(GRAY),
    font: gContext.font,
  };

  mut freeform_area: FreeformArea = .{
    base: .{
      model_rectangle: .{
        x: 0.15,
        y: 0.06666667,
        width: 0.80625,
        height: 0.8666667,
      },
      style: .{
        background: GRAY,
        font: gContext.font,
      }
    }
  };

  mut node_list: ListBox = .{
    base: .{
      model_rectangle: .{
        x: 0.0125,
        y: 0.06666667,
        width: 0.125,
        height: 0.8666667,
      },
      style: .{
        font: gContext.font,
        background: GRAY,
        foreground: WHITE,
      }
    }
  };

  mut toolbar: ListBox = .{
    base: .{
      model_rectangle: .{
        x: 0.0125,
        y: 0.007,
        width: 0.945,
        height: 0.05,
      },
      style: .{
        font: gContext.font,
        background: GRAY,
        foreground: WHITE,
        margin: 3.0,
      },
    }
    layout_style: LayoutStyle::Horizontal(),
  };

  enum View {
    Plot,
    Graph,
  }

  struct ViewButtonState {
    button: *mut Button!<str, ViewButtonState>,
    view: View,
  }

  mut button: Button!<str, ViewButtonState> = .{
    on_clicked: fn(arg: *mut void) {
      state: *mut ViewButtonState = arg;
      state.view = !state.view;

      if state.view == View::Plot {
        state.button.label = Some("Graph");
      } else {
        state.button.label = Some("Plot");
      }

    },
    label: Some("Graph"),
  };

  mut vbs := ViewButtonState.{
    button: &mut button,
    view: View::Plot,
  };

  button.user_arg = &mut vbs;
  toolbar.add_child(&mut button);

  gContext.node_list_ui = &mut node_list;
  gContext.freeform_area = &mut freeform_area;
  gContext.toolbar = &mut toolbar;

  fn clear_state() {
    for node in gContext.nodes {
      node.deinit();
    }
    gContext.nodes.deinit();

    for operation in gContext.operations {
      operation.deinit();
    }
    gContext.operations.deinit();

    for child in gContext.node_list_ui.get_children().iter() {
      get_global_allocator().free(child.instance);
    }
    gContext.node_list_ui.children.deinit();

    gContext.toolbar.children.deinit();
  }

  fn post_render_hook(_: *mut ()) {
    if IsKeyPressed(KeyboardKey::KEY_C) {
      clear_state();
      return;
    }

    for node in gContext.nodes.iter_mut() {
      node.draw();
    }
    for operation in gContext.operations.iter_mut() {
      operation.draw();
    }
  }

  window.add_widget(&mut node_list)
        .add_widget(&mut freeform_area)
        .add_widget(&mut toolbar)
        .add_render_hook(&mut post_render_hook, RenderHookPriority::PostWidgetRender)
        .run();

  // cleanup;
  clear_state();

  std::printf("\033[1;3;31mFailed to free \033[3;3;33m%d\033[1;3;31m allocations!\n\033[0m", allocator.length);
}